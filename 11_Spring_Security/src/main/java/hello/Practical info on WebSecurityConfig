The WebSecurityConfig class is annotated with @EnableWebSecurity to enable Spring Security’s web security support
and provide the Spring MVC integration. It also extends WebSecurityConfigurerAdapter and overrides a couple of
its methods to set some specifics of the web security configuration.

The configure(HttpSecurity) method defines which URL paths should be secured and which should not. Specifically,
the "/" and "/home" paths are configured to not require any authentication. All other paths must be authenticated.

When a user successfully logs in, they will be redirected to the previously requested page that required authentication.
There is a custom "/login" page specified by loginPage(), and everyone is allowed to view it.

As for the userDetailsService() method, it sets up an in-memory user store with a single user.
That user is given a username of "user", a password of "password", and a role of "USER".

Now we need to create the login page. There’s already a view controller for the "login" view,
so you only need to create the login view itself:





























